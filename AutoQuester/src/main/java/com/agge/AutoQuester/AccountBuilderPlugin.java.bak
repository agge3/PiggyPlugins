/**
 * @author agge3
 * @file AutoQuesterConfig.java
 * Derived in large part from AutoCombat.
 */

package com.agge.AutoQuester;

import com.example.EthanApiPlugin.Collections.ETileItem;
import com.example.EthanApiPlugin.Collections.Inventory;
import com.example.EthanApiPlugin.Collections.NPCs;
import com.example.EthanApiPlugin.Collections.TileItems;
import com.example.EthanApiPlugin.Collections.query.TileItemQuery;
import com.example.EthanApiPlugin.EthanApiPlugin;
import com.example.InteractionApi.InventoryInteraction;
import com.example.Packets.*;
import com.google.inject.Inject;
import com.google.inject.Provides;
import com.piggyplugins.PiggyUtils.API.PlayerUtil;
import lombok.extern.slf4j.Slf4j;
import net.runelite.api.*;
import net.runelite.api.coords.WorldPoint;
import net.runelite.api.coords.LocalPoint;
import net.runelite.api.events.*;
import net.runelite.client.callback.ClientThread;
import net.runelite.client.config.ConfigManager;
import net.runelite.client.eventbus.Subscribe;
import net.runelite.client.events.ConfigChanged;
import net.runelite.client.events.NpcLootReceived;
import net.runelite.client.game.ItemManager;
import net.runelite.client.game.ItemStack;
import net.runelite.client.input.KeyManager;
import net.runelite.client.plugins.Plugin;
import net.runelite.client.plugins.PluginDescriptor;
import net.runelite.client.ui.overlay.OverlayManager;
import net.runelite.client.util.HotkeyListener;
import static net.runelite.api.TileItem.OWNERSHIP_SELF;
import static net.runelite.api.TileItem.OWNERSHIP_GROUP;
import com.agge.AutoQuester.AutoQuesterConfig;
import com.agge.AutoQuester.AutoQuesterOverlay;
import com.agge.AutoQuester.AutoQuesterTileOverlay;
import com.agge.AutoQuester.Util;
import com.agge.AutoQuester.IntPtr;
import net.runelite.api.widgets.Widget;
import com.example.EthanApiPlugin.Collections.Widgets;
import com.agge.AutoQuester.Pathing;
import com.example.InteractionApi.NPCInteraction;
import com.example.PacketUtils.WidgetInfoExtended;

import java.util.*;
import java.util.function.BooleanSupplier;

@PluginDescriptor(
        name = "<html><font color=\"#FF9DF9\">[PP]</font> AutoQuester</html>",
        description = "a(uto) looter",
        enabledByDefault = false,
        tags = {"piggy", "plugin"}
)

@Slf4j
public class AutoQuesterPlugin extends Plugin {
    @Inject
    private Client client;
    @Inject
    private AutoQuesterConfig config;
    @Inject
    private AutoQuesterOverlay overlay;
    @Inject
    private AutoQuesterTileOverlay tileOverlay;
    @Inject
    private KeyManager keyManager;
    @Inject
    private OverlayManager overlayManager;
    @Inject
    public ItemManager itemManager;
    @Inject
    private ClientThread clientThread;
    @Inject
    private Util util;
    @Inject
    public PlayerUtil playerUtil;
    @Inject
    public AutoQuesterHelper acHelper;
    @Inject
    private Pathing pathing;

    @Provides
    private AutoQuesterConfig getConfig(ConfigManager configManager) {
        return configManager.getConfig(AutoQuesterConfig.class);
    }

    public boolean started = false;
    int timeout = 0;
    
    private Optional<Widget> dialog;
    List<WorldPoint> path = new ArrayList<WorldPoint>();
    public int currIdx = 0;

    WorldPoint shopkeeper = new WorldPoint(3212, 3246, 0);
    WorldPoint veos = new WorldPoint(3228, 3242, 0);

	//final WorldPoint egg = new WorldPoint(3177, 3296, 0);
	//final WorldPoint shopkeeper = new WorldPoint(3212, 3246, 0);
	//coins.quantity(3));
	//ItemID.BUCKET
	//NpcID.SHOP_ASSISTANT
	//final WorldPoint pot  = new WorldPoint(3212, 3246, 0);
	//final WorldPoint milkCow = new WorldPoint(3254, 3272, 0);
    //ObjectID.DAIRY_COW // with bucket
    //final WorldPoint wheat = new WorldPoint(3161, 3292, 0);
    //ObjectID.WHEAT_15507
    //		climbLadderOne = new WorldPoint(3164, 3307, 0);
    //ObjectID.LADDER_12964
    //		climbLadderTwoUp = new WorldPoint(3164, 3307, 1);
    //ObjectID.LADDER_12965
    //		climbLadderTwoUp.addDialogStep("Climb Up.");

    //		climbLadderOne.addSubSteps(climbLadderTwoUp);

    //final WorldPoint fillHopper = new WorldPoint(3166, 3307, 2);
    //ObjectID.HOPPER_24961
    //		ItemID.GRAIN;
    //		operateControls = new WorldPoint(3166, 3305, 2);
    //ObjectID.HOPPER_CONTROLS_24964
	//
	//final WorldPoint climbLadderThree = ObjectID.LADDER_12966, new WorldPoint(3164, 3307, 2)
	//
	//final WorldPoint climbLadderTwoDown ObjectID.LADDER_12965, new WorldPoint(3164, 3307, 1),

	//climbLadderTwoDown.addDialogStep("Climb Down.");

	//final WorldPoint collectFlour = ObjectID.FLOUR_BIN, new WorldPoint(3166, 3306, 0),
	//
	//collectFlour.addIcon(ItemID.POT);
	//final WorldPoint NpcID.COOK_4626, new WorldPoint(3206, 3214, 0),
	//	//"Give the Cook in Lumbridge Castle's kitchen the required items to finish the quest.",
	//	//egg, milk, flour);
	//finishQuest.addDialogSteps("What's wrong?", "Can I help?", "Yes.");

	//final WorldPoint startStep =NpcID.FRED_THE_FARMER, new WorldPoint(3190, 3273, 0),
	//
	//startStep.addDialogSteps("I'm looking for a quest.", "Yes, okay. I can do that.", "Yes.");
	//getSheers = new WorldPoint(3190, 3273, 0),
	//
	//final WorldPoint shearSheep = NpcID.SHEEP_2786, new WorldPoint(3201, 3268, 0),
	//
	//shearSheep.addAlternateNpcs(NpcID.SHEEP_2699, NpcID.SHEEP_2787, NpcID.SHEEP_2693, NpcID.SHEEP_2694, NpcID.SHEEP_2699, NpcID.SHEEP_2695);
	//climbStairsUp ObjectID.STAIRCASE_16671, new WorldPoint(3204, 3207, 0),
	//
	//final WorldPoint spinBalls = ObjectID.SPINNING_WHEEL_14889, new WorldPoint(3209, 3212, 1),
	//
	//spinBalls.addWidgetHighlight(270, 14);
	//final WorldPoint climbStairsDown = ObjectID.STAIRCASE_16672, new WorldPoint(3204, 3207, 1),
	//	"Climb down the staircase.", totalBallsNeeded);
	//climbStairsDown.addDialogSteps("Climb down the stairs.");
	//final WorldPoint turnInBalls = NpcID.FRED_THE_FARMER, new WorldPoint(3190, 3273, 0),
	//
	//turnInBalls.addDialogSteps("I need to talk to you about shearing these sheep!");
	//// TODO: Worth adding PuzzleWrapperStep at all given the Clue Plugin also does this?
	//final WorldPoint speakVeosLumbridge = NpcID.VEOS_8484, new WorldPoint(3228, 3242, 0),
	//	"Talk to Veos in The Sheared Ram pub in Lumbridge to start the quest.");
	//speakVeosLumbridge.addDialogStep("I'm looking for a quest.");
	//speakVeosLumbridge.addDialogStep("Sounds good, what should I do?");
	//speakVeosLumbridge.addDialogSteps("Can I help?", "Yes.");

	//final WorldPoint digOutsideBob = new WorldPoint(3230, 3209, 0),
	//
	//digOutsideBob.addDialogStep("Okay, thanks Veos.");

	//final WorldPoint digCastle = new WorldPoint(3203, 3212, 0),

	//final WorldPoint digDraynor = new WorldPoint(3109, 3264, 0),
	//		final WorldPoint digMartin = new WorldPoint(3078, 3259, 0),
	//
	//	new ItemRequirement("Treasure scroll", ItemID.TREASURE_SCROLL_23070));

	//ItemRequirement ancientCasket = new ItemRequirement("Ancient casket", ItemID.ANCIENT_CASKET);

	//speakVeosSarim = NpcID.VEOS_8484, new WorldPoint(3054, 3245, 0),
	//
	//	ancientCasket);
	//((NpcStep) speakVeosSarim).addAlternateNpcs(NpcID.VEOS_8630);

	//speakVeosSarimWithoutCasket = NpcID.VEOS_8484, new WorldPoint(3054, 3245, 0),
	//
	//((NpcStep) speakVeosSarimWithoutCasket).addAlternateNpcs(NpcID.VEOS_8630);

	//speakVeosSarim.addSubSteps(speakVeosSarimWithoutCasket);

    @Override
    protected void startUp() throws Exception {
        keyManager.registerKeyListener(toggle);
        overlayManager.add(overlay);
        overlayManager.add(tileOverlay);
        registerInstructions();
    }

    @Override  
    protected void shutDown() throws Exception {
        keyManager.unregisterKeyListener(toggle);
        overlayManager.remove(overlay);
        overlayManager.remove(tileOverlay);
        resetEverything();
    }

    public void resetEverything() {
        instructions.clear();
        currIdx = 0; 
    }

    private static Vector<BooleanSupplier> instructions = new Vector<>();

    private boolean continueDialogue() {
        log.info("Entering cont dialog");
        Optional<Widget> mainContinueOpt = Widgets.search().withTextContains("Click here to continue").first();
        if (mainContinueOpt.isPresent()) {
            MousePackets.queueClickPacket();
            WidgetPackets.queueResumePause(mainContinueOpt.get().getId(), -1);
            timeout = 0;
            return true;
        }

        Optional<Widget> continue1Opt = Widgets.search().withId(12648448).hiddenState(false).first();
        if (continue1Opt.isPresent()) {
            log.info("continue 1");
            MousePackets.queueClickPacket();
            WidgetPackets.queueResumePause(continue1Opt.get().getId(), 1);
            return true;
        }
        Optional<Widget> continue2Opt = Widgets.search().withId(41484288).hiddenState(false).first();
        if (continue2Opt.isPresent()) {
            log.info("continue 2");
            MousePackets.queueClickPacket();
            WidgetPackets.queueResumePause(continue2Opt.get().getId(), 1);
            return true;
        }
//        log.info("ret false");
        return false;
    }

    private boolean selectDialogue(String str, int choice) {
        Optional<Widget> d = Widgets.search()
                                    .withTextContains(str)
                                    .first();
        if (d.isPresent()) {
            MousePackets.queueClickPacket();
            WidgetPackets.queueResumePause(d.get().getId(), choice);
            return true;
        }
        return false;
    }

    public void addInstruction(BooleanSupplier instruction) {
        instructions.add(instruction);
    }incompatible types: bad return type in lambda expression
        addInstruction(() -> {

    private boolean selectDialogue(String str) { 
        Optional<Widget> d = Widgets.search()
                                    .withTextContains(str)
                                    .first();
        if (d.isPresent()) {
            MousePackets.queueClickPacket();
            WidgetPackets.queueResumePause(d.get().getId(), 1);
            return true;
        }
        return false;
    } 

    // Registering all the instructions, these will return true when they 
    // should be removed. Then move on to the next.
    public void registerInstructions() {
        addInstruction(() -> pathing.walkTo(veos) );
        // Full Veos dialogue.
        addInstruction(() -> {
            log.info("Trying to interact with NPC.");
            return NPCInteraction.interact("Veos", "Talk-to");
        }); 
        addInstruction(() -> continueDialogue() );  
        addInstruction(() -> {
            log.info("Internet dia 1");
            dialog = Widgets.search()
                            .withTextContains("I'm looking for a quest.")
                            .first();
            if (dialog.isPresent()) {
                MousePackets.queueClickPacket();
                WidgetPackets.queueResumePause(dialog.get().getId(), 1);
                return true;
            }
            return false;
        });
        addInstruction(() -> continueDialogue() );
        addInstruction(()-> {
            log.info("Entering dia 2");
            dialog = Widgets.search()
                            .withTextContains("Can I help you?")
                            .first();
            if (dialog.isPresent()) {
                MousePackets.queueClickPacket();
                WidgetPackets.queueResumePause(dialog.get().getId(), 1);
                return true;
            }
            return false;
        });
        addInstruction(() -> continueDialogue() );
        addInstruction(()-> {   
            dialog = Widgets.search()
                            .withTextContains("Yes.")
                            .first();
            if (dialog.isPresent()) {
                MousePackets.queueClickPacket();
                WidgetPackets.queueResumePause(dialog.get().getId(), 1);
                return true;
            }
            return false;
        });
        addInstruction(() -> continueDialogue() );
        addInstruction(() -> {   
            dialog = Widgets.search()
                            .withTextContains("Okay, thanks Veos")
                            .first();
            if (dialog.isPresent()) {
                MousePackets.queueClickPacket();
                WidgetPackets.queueResumePause(dialog.get().getId(), 1);
                return true;
            }
            return false;
        });
        addInstruction(() -> continueDialogue() );
        addInstruction(() -> pathing.pathingTo(new WorldPoint(3190, 3273,0)) );
    }

    public void executeInstructions() {
        if (instructions.get(currIdx).getAsBoolean()) {
            instructions.remove(currIdx);
            log.info("AB on instruction idx:" + currIdx);
            currIdx++;
        }
    }
   
    @Subscribe
    private void onGameTick(GameTick event) {
        log.info("Curr idx: " + currIdx);
        log.info("Size: " + instructions.size());
        executeInstructions(); 
        pathing.run();
    }

    @Subscribe
    public void onStatChanged(StatChanged event) {
        if (!started) 
            return;
    }

    @Subscribe
    public void onChatMessage(ChatMessage event) {
        if (!started)
            return;
    }


    @Subscribe
    public void onVarbitChanged(VarbitChanged event) {
        if (!started) 
            return;
        int bid = event.getVarbitId();
        int pid = event.getVarpId();
    }

    @Subscribe
    public void onConfigChanged(ConfigChanged event) {
        if (!event.getGroup().equals("AutoQuesterConfig"))
            return;
    }

    @Subscribe
    public void onGameStateChanged(GameStateChanged event) {
        GameState state = event.getGameState();
        if (state == GameState.HOPPING || state == GameState.LOGGED_IN)
            return;
        EthanApiPlugin.stopPlugin(this);
    }

    /* @note Not handling run energy in AutoQuester. */
    //private void checkRunEnergy() {
    //    if (runIsOff() && playerUtil.runEnergy() >= 30) {
    //        MousePackets.queueClickPacket();
    //        WidgetPackets.queueWidgetActionPacket(1, 10485787, -1, -1);
    //    }
    //}

    //private boolean runIsOff() {
    //    return EthanApiPlugin.getClient().getVarpValue(173) == 0;
    //}

    private final HotkeyListener toggle = new HotkeyListener(
        () -> config.toggle()) {
            @Override
            public void hotkeyPressed() {
            toggle();
            }
    };

    public void toggle() {
        if (client.getGameState() != GameState.LOGGED_IN) {
            return;
        }
        started = !started;
    }
}
